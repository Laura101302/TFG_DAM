{"ast":null,"code":"import { BaseChartDirective } from 'ng2-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/faltas.service\";\nimport * as i2 from \"ng2-charts\";\nexport let BarChartComponent = /*#__PURE__*/(() => {\n  class BarChartComponent {\n    constructor(_service) {\n      this._service = _service;\n      this.barChartOptions = {\n        responsive: true,\n        // We use these empty structures as placeholders for dynamic theming.\n        scales: {\n          x: {},\n          y: {\n            min: 10\n          }\n        },\n        plugins: {\n          legend: {\n            display: true\n          }\n        }\n      };\n      this.barChartType = 'bar';\n      this.barChartData = {\n        datasets: []\n      };\n    }\n\n    ngOnInit() {\n      this._service.getBookData().subscribe(x => {\n        let chartData = new Array(12);\n        let currentMonth = -1;\n        x.forEach(element => {\n          currentMonth = new Date(element.date).getMonth();\n\n          if (chartData[currentMonth] === undefined) {\n            chartData[currentMonth] = element.number;\n          } else {\n            chartData[currentMonth] += element.number;\n          }\n        });\n        this.barChartData = {\n          labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n          datasets: [{\n            data: chartData,\n            label: 'Faltas'\n          }]\n        };\n      });\n    } // events\n\n\n    chartClicked({\n      event,\n      active\n    }) {\n      console.log(event, active);\n    }\n\n    chartHovered({\n      event,\n      active\n    }) {\n      console.log(event, active);\n    }\n\n  }\n\n  BarChartComponent.ɵfac = function BarChartComponent_Factory(t) {\n    return new (t || BarChartComponent)(i0.ɵɵdirectiveInject(i1.FaltasService));\n  };\n\n  BarChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BarChartComponent,\n    selectors: [[\"app-bar-chart\"]],\n    viewQuery: function BarChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(BaseChartDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n      }\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[2, \"display\", \"block\"], [\"baseChart\", \"\", 3, \"data\", \"options\", \"type\", \"chartHover\", \"chartClick\"]],\n    template: function BarChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelementStart(2, \"canvas\", 1);\n        i0.ɵɵlistener(\"chartHover\", function BarChartComponent_Template_canvas_chartHover_2_listener($event) {\n          return ctx.chartHovered($event);\n        })(\"chartClick\", function BarChartComponent_Template_canvas_chartClick_2_listener($event) {\n          return ctx.chartClicked($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"data\", ctx.barChartData)(\"options\", ctx.barChartOptions)(\"type\", ctx.barChartType);\n      }\n    },\n    directives: [i2.BaseChartDirective],\n    styles: [\"\"]\n  });\n  return BarChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}